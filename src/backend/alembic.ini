# Enterprise-grade Alembic configuration for Customer Success AI Platform
# Version: 1.0.0
# Database: PostgreSQL 15+
# Security: Enterprise-grade with SSL, connection pooling, and comprehensive monitoring

[alembic]
# Migration script location
script_location = src/db/migrations

# Migration file naming template
file_template = %(year)d_%(month).2d_%(day).2d_%(hour).2d%(minute).2d-%(rev)s_%(slug)s

# Timezone configuration
timezone = UTC

# Maximum length of migration description in filename
truncate_slug_length = 40

# Enable access to revision environment
revision_environment = true

# Disable sourceless migrations for audit trail
sourceless = false

# Version locations
version_locations = %(here)s/versions

# Database URL with secure SSL configuration
sqlalchemy.url = postgresql+psycopg2://%(DB_USER)s:%(DB_PASS)s@%(DB_HOST)s:%(DB_PORT)s/%(DB_NAME)s?sslmode=verify-full&sslcert=%(SSL_CERT)s&sslkey=%(SSL_KEY)s&sslrootcert=%(SSL_ROOT_CERT)s

# Connection pool settings
sqlalchemy.pool_size = 10
sqlalchemy.max_overflow = 20
sqlalchemy.pool_timeout = 30
sqlalchemy.pool_recycle = 1800

# Connection arguments for security and reliability
sqlalchemy.connect_args = {"connect_timeout": 10, "application_name": "cs_ai_platform_migrations", "keepalives": 1, "keepalives_idle": 30, "keepalives_interval": 10, "keepalives_count": 5, "sslmode": "verify-full", "options": "-c statement_timeout=60000 -c lock_timeout=10000"}

[post_write_hooks]
# Post-migration code quality and security checks
hooks = black,isort,security_check

black.type = console_scripts
black.entrypoint = black

isort.type = console_scripts
isort.entrypoint = isort

security_check.type = console_scripts
security_check.entrypoint = bandit

[loggers]
keys = root,sqlalchemy,alembic,security

[logger_root]
level = INFO
handlers = console,security_log,audit_log
qualname = alembic

[logger_sqlalchemy]
level = INFO
handlers = console,audit_log
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console,audit_log
qualname = alembic

[logger_security]
level = INFO
handlers = security_log
qualname = security

[handlers]
keys = console,security_log,audit_log

[handler_console]
class = StreamHandler
level = INFO
formatter = json
args = (sys.stdout,)

[handler_security_log]
class = FileHandler
level = INFO
formatter = json
args = ('logs/security.log', 'a')

[handler_audit_log]
class = FileHandler
level = INFO
formatter = json
args = ('logs/audit.log', 'a')

[formatters]
keys = json

[formatter_json]
class = pythonjsonlogger.jsonlogger.JsonFormatter
format = %(asctime)s %(name)s %(levelname)s %(message)s %(module)s %(funcName)s %(lineno)s %(process)d %(thread)d %(environment)s %(version)s
datefmt = %Y-%m-%d %H:%M:%S %z