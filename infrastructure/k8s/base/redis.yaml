---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: customer-success-ai
  labels:
    app: customer-success-platform
    component: cache
    tier: data
    managed-by: kustomize
  annotations:
    service.kubernetes.io/topology-aware-hints: "auto"
spec:
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
  selector:
    app: customer-success-platform
    component: cache
  clusterIP: None
  publishNotReadyAddresses: false
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: customer-success-ai
  labels:
    app: customer-success-platform
    component: cache
    tier: data
    managed-by: kustomize
  annotations:
    redis.version: "7.0"
spec:
  serviceName: redis
  replicas: 3
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: customer-success-platform
      component: cache
  template:
    metadata:
      labels:
        app: customer-success-platform
        component: cache
        tier: data
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6379"
    spec:
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - customer-success-platform
                  - key: component
                    operator: In
                    values:
                      - cache
              topologyKey: kubernetes.io/hostname
      containers:
        - name: redis
          image: redis:7.0
          imagePullPolicy: IfNotPresent
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --save
            - "900 1"
            - --save
            - "300 10"
            - --save
            - "60 10000"
          ports:
            - containerPort: 6379
              name: redis
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          livenessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
          volumeMounts:
            - name: redis-data
              mountPath: /data
          env:
            - name: MASTER
              value: "true"
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: standard