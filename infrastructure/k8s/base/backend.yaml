# Backend Kubernetes base configuration for Customer Success AI Platform
# Version: 1.0.0
# Dependencies:
# - kubernetes v1.25+
# - Redis service for caching
# - Production config overlay for env-specific settings

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: customer-success-ai
  labels:
    app: backend
    component: api
    tier: application
    managed-by: kustomize
  annotations:
    description: "Backend API deployment for Customer Success AI Platform"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
      component: api
  template:
    metadata:
      labels:
        app: backend
        component: api
      annotations:
        checksum/config: ${CONFIG_CHECKSUM}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: $(REGISTRY)/backend:$(TAG)
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        env:
        - name: REDIS_HOST
          value: "redis.$(NAMESPACE).svc.cluster.local"
        - name: API_WORKERS
          value: "2"
        - name: LOG_LEVEL
          value: "INFO"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: backend-config
      serviceAccountName: backend-service-account
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: customer-success-ai
  labels:
    app: backend
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: backend
    component: api

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: customer-success-ai
spec:
  podSelector:
    matchLabels:
      app: backend
      component: api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: customer-success-ai
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: customer-success-ai
    ports:
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: customer-success-ai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300