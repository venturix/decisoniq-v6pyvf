name: Security Scan

on:
  schedule:
    # Daily security scan at midnight UTC
    - cron: '0 0 * * *'
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  codeql-analysis:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript', 'python']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          upload: true

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: codeql-analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.12.0
        with:
          scan-type: 'fs,config'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-security'

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: codeql-analysis

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Run Snyk Python scan
        uses: snyk/actions/python@v1
        with:
          command: test
          args: --severity-threshold=high --file=src/backend/pyproject.toml

      - name: Run Snyk Node.js scan
        uses: snyk/actions/node@v1
        with:
          command: test
          args: --severity-threshold=high

      - name: Generate Snyk report
        if: always()
        run: |
          snyk monitor --all-projects
          snyk test --json > snyk-results.json

  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog-actions-scan@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      - name: Run GitGuardian scan
        uses: GitGuardian/ggshield-action@master
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: --all-policies --show-secrets

  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=customer-success-ai
            -Dsonar.organization=blitzy
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.python.version=3.11
            -Dsonar.typescript.version=5.0
            -Dsonar.qualitygate.wait=true

      - name: Generate consolidated security report
        if: always()
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Scan Timestamp: $(date -u)" >> security-report.md
          echo "### CodeQL Results" >> security-report.md
          cat codeql-results.sarif >> security-report.md
          echo "### Container Scan Results" >> security-report.md
          cat trivy-results.sarif >> security-report.md
          echo "### Dependency Scan Results" >> security-report.md
          cat snyk-results.json >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

  notify:
    name: Notification Handler
    runs-on: ubuntu-latest
    needs: [sast-scan, container-scan]
    if: always()

    steps:
      - name: Check scan status
        id: check
        run: |
          if [[ ${{ needs.sast-scan.result }} == 'failure' || ${{ needs.container-scan.result }} == 'failure' ]]; then
            echo "scan_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: Send notification on failure
        if: steps.check.outputs.scan_failed == 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'security-alerts'
          slack-message: "Security scan failed in ${{ github.repository }}. Check details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}